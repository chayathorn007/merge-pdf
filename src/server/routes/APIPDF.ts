import { Request, Response, Router } from "express";
import multer from "multer";
import fs from "fs";
import path from "path";
import puppeteer from "puppeteer";
import pdf from "pdf-parse";
import { extractShopeeWithAI } from "../services/AI/extractShopeeWithAI";  // AI function
import { mergePdfFilesOCR } from "../utils/mergePdfFiles";  // PDF merging function

const uploadRouter = Router();

const uploadsDir = path.resolve("uploads");
if (!fs.existsSync(uploadsDir)) fs.mkdirSync(uploadsDir, { recursive: true });

const storage = multer.diskStorage({
  destination: uploadsDir,
  filename: (req, file, cb) => {
    const filename = Date.now() + "-" + file.originalname;
    cb(null, filename);
  },
});

const upload = multer({ storage });

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ PDF
async function extractTextByPage(filePath: string): Promise<string[]> {
  const data = fs.readFileSync(filePath);
  const pdfData = await pdf(data);

  // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  const pagesText = pdfData.text.split("\n\n");
  return pagesText;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
async function processPageByPage(filePath: string) {
  const pages = await extractTextByPage(filePath);
  const allExtractedData: any[] = [];

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
  for (let i = 0; i < pages.length; i++) {
    const pageText = pages[i];
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ AI ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    const extracted = await extractShopeeWithAI(pageText);
    if (extracted.length > 0) {
      allExtractedData.push(...extracted);
    }
  }

  return allExtractedData;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI
async function generatePDFFromAIData(data: any[], outputPath: string) {
  const browser = await puppeteer.launch({
    headless: true,  // ‡πÉ‡∏ä‡πâ headless ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÉ‡∏ô production
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });
  const page = await browser.newPage();

  // ‡πÇ‡∏´‡∏•‡∏î HTML template
  const templatePath = path.join(__dirname, "../templates/template SPX.html");
  const htmlTemplate = fs.readFileSync(templatePath, "utf-8");

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI ‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡∏á‡πÉ‡∏ô HTML template
  const filledHtml = data
    .map((item) => {
      const lines = splitTextSmart(item.recipient, 36);
      let html = htmlTemplate
        .replace(/{{order_number}}/g, item.order || "")
        .replace(/{{sender_line1}}/g, lines[0] || "")
        .replace(/{{sender_line2}}/g, lines[1] || "")
        .replace(/{{sender_line3}}/g, lines[2] || "");

      if (lines[3]) {
        html = html.replace("{{sender_line4}}", lines[3]);
      } else {
        html = html.replace("{{sender_line4}}", "");
      }

      return html;
    })
    .join("\n<div style='page-break-after:always'></div>\n");

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≤‡∏Å HTML
  await page.setContent(filledHtml, { waitUntil: "networkidle0" });
  await page.pdf({ path: outputPath, width: "384px", height: "576px", printBackground: true });
  await browser.close();
}

function splitTextSmart(input: string, maxCharsPerLine = 36): string[] {
  const words = input.trim().split(/\s+/);
  const lines = [""];
  for (const word of words) {
    const currentLine = lines[lines.length - 1];
    if ((currentLine + " " + word).trim().length <= maxCharsPerLine) {
      lines[lines.length - 1] = (currentLine + " " + word).trim();
    } else {
      lines.push(word);
    }
  }
  return lines;
}


// POST handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
uploadRouter.post("/OCR", upload.single("pdf"), async (req: Request, res: Response) => {
  try {
    if (!req.file || !req.file.path) {
      res.status(400).send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF");
      return;
    }

    const filePath = req.file.path;
    const fileName = path.basename(filePath, path.extname(filePath));
    const generatedPath = path.join(uploadsDir, `${fileName}_gen.pdf`);

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
    const extractedData = await processPageByPage(filePath);

    if (extractedData.length === 0) {
      res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AI" });
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å AI
    await generatePDFFromAIData(extractedData, generatedPath);

    // ‡∏£‡∏ß‡∏° PDF ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const mergedBuffer = await mergePdfFilesOCR([filePath, generatedPath]);

    // üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    [filePath, generatedPath].forEach((p) => {
      if (fs.existsSync(p)) fs.unlinkSync(p);
    });

    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ encodeURIComponent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô header
    const safeFileName = encodeURIComponent(fileName).replace(/%/g, "");
    res.set({
      "Content-Type": "application/pdf",
      "Content-Disposition": `attachment; filename="${safeFileName}_label.pdf"`,
      "Content-Length": mergedBuffer.length,
    });

    res.send(mergedBuffer);
  } catch (err: any) {
    console.error("‚ùå ERROR:", err);
    res.status(500).send("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: " + err.message);
  }
});

export { uploadRouter };

